I64 atan2(I64 x, I64 y) {
	F64 r;
	if (x > 0)
		r = ATan(y/x);
	if (x < 0 && y >= 0)
		r = ATan(y/x) + pi;
	if (x < 0 && y < 0)
		r = ATan(y/x) - pi;
	if (x == 0 && y > 0)
		r = pi / 2;
	if (x == 0 && y < 0)
		r = (-pi) / 2;
	return ToI64((r * 180) / pi);
}

I64 maxArr (I64 *arr, I64 l) {
	I64 i, fv;
	fv = arr[0];
	for (i=0;i<l;i++) {
		if (fv < arr[i])
			fv = arr[i];
	}
	return fv;
}

I64 minArr (I64 *arr, I64 l) {
	I64 i, fv;
	fv = arr[0];
	for (i=0;i<l;i++) {
		if (fv > arr[i])
			fv = arr[i];
	}
	return fv;
}

I64 rotX (I64 r, I64 x, I64 y) {
	F64 a = r * (pi / 180);
	return (x * Cos(a)) - (y * Sin(a));
}

I64 rotY (I64 r, I64 x, I64 y) {
	F64 a = r * (pi / 180);
	return (x * Sin(a)) + (y * Cos(a));
}

I64 dist (I64 x1, I64 x2, I64 y1, I64 y2) {
	return ToI64(Sqrt(Pow(x2 - x1,  2.0) + Pow(y2 - y1, 2.0)));
}

Bool insideCircle (I64 x, I64 y, I64 xc, I64 yc, I64 vr) {
	I64 d = dist(x, xc, y, yc);
	return (d <= vr);
}